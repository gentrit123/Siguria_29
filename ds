import random, sys, os, rabinMiller, cryptomath
import xml.etree.ElementTree as xml
import base64
from Crypto.Cipher import DES
import secrets
from Crypto.PublicKey import RSA
import bcrypt
from Crypto.Cipher import PKCS1_OAEP
import string
import getpass
import Crypto
import binascii
import tokenlib
import re
from hashlib import sha512
from datetime import datetime, timedelta





##QEKY OSHT NI FUNKSION QE QAT VLER NUMERIKE QE JA JEPUM, PSH VLEREN E QELESIT KY E MERR E E KTHEN "N'base64".
def return_base64(parametri):
  encode_utf8=str(parametri).encode("utf-8")
  b64=base64.b64encode(encode_utf8)
  decode_utf8=b64.decode("utf-8")
  return decode_utf8




#Ky funksion e kthen true ose false varsisht nese ekziston File apo jo, e kqyr edhe nese ekziston ai publik edhe ai privat pastaj i ruan ne nje array.
def isFile(parametri):
  isfile = os.path.isfile("%s.xml" %(parametri))
  isfile_pub = os.path.isfile("%s.pub.xml" %(parametri))
  isfile2 = [isfile, isfile_pub]
  return isfile2




#Ky eshte nje funksion i cili i fshin te dy Filet edhe ata publik te shfrytezuesit edhe ata privat, varsisht nese vlen kushti ne kod.
def remove_2file(parametri):
  os.remove("%s.xml" %(parametri))
  os.remove("%s.pub.xml" %(parametri))
  print("Eshte larguar celesi privat 'keys/%s.xml'" %(parametri))
  print("Eshte larguar celesi publik 'keys/%s.pub.xml'" %(parametri))


#Ky eshte nje funksion i cili nese vlen kushti qe ekziston File i qelsit privat te shfrytezuesit, ky e fshin ate.
def remove_privat_file(parametri):

  f = open("%s.xml" %(parametri), "r")
  content = f.read()
  f.close()
  
  os.remove("%s.xml" %(parametri))

  if (content.find('P') == -1):
    print("Eshte larguar celesi publik 'keys/%s.xml'" %(parametri))
  else: 
    print("Eshte larguar celesi privat 'keys/%s.xml'" %(parametri))




#ky eshte nje funksion i cili nese vlen kushti qe ekzston File i qelsit publik te shfrytezuesit ather e ekzektuojm kete funksion, dhe ky funksion e fshin ate.
def remove_public_file(parametri):
  os.remove("%s.pub.xml" %(parametri))
  print("Eshte larguar celesi publik 'keys/%s.pub.xml'" %(parametri))




#ky eshte nje funksion i cili e eksporton qelsin publik te edonit psh tek vlera e parametrt_2 psh genti.xml, nese nuk e kemi japur ate ateher ky e shfaq ate.
def publicKey_export(parametri_1, parametri_2):
  f = open("%s.pub.xml" %(parametri_1))
  content = f.read()
  if parametri_2 !="":
    generate_XML_public(str(parametri_2))
    f1 = open(str(parametri_2), "w+")
    f1.write(str(content))
    f1.close()
    if parametri_2 !="":
      print("Celesi publik u ruajt ne fajllin '%s'" %(parametri_2))
    else:
      print(content)




#Ky eshte nje funksion i cili e eksporton qelsin private te edonit psh tek vlera e parametrit_2 psh genti.xml, nese nuk e kemi japur ate atehere ky e shhfaq ate.
def privateKey_export(parametri_1, parametri_2):
  book = "%s.xml" %(parametri_1)
  f = open(book, "r")
  content = f.read()
  generate_XML_private(str(parametri_2))
  f1 = open(str(parametri_2), "w+")
  f1.write(str(content))
  f1.close()
  if parametri_2 != "":
    print("Celesi privat u ruajt ne fajllin '%s'" %(parametri_2))
  else:
    print(content)

#Funksion i cili i merr veq 4 karakteret e fundit te nje string-u.
def get_last_four_char(parametri):
  last_four_char=parametri[-4:]
  return last_four_char





#Kur ky na kthen si return content, na n qat kontent e kqyrim a ka permbajtje publik apo privat.
def is_content_Priv_or_Pub(parametri):
  book = r"C:\Users\hp\Desktop\%s" %(parametri)
  f = open("%s" %(book), "r")
  content = f.read()

  return content

#Ky funksion perdoret pasi e shikojm qe te import nuk e ka ajo permbajtjen private.
def is_not_Private(parametri_1, parametri_2):
  book1 = r"C:\Users\hp\Desktop\%s" %(parametri_1)
  book = "%s" %(book1)
  f = open(book, "r")
  content = f.read()

  generate_XML_public("%s.pub.xml" %(parametri_2))
  print("Celesi publik u ruajt ne fajllin 'keys/%s.pub.xml'." %(parametri_2))

  f2 = open("%s.pub.xml" %(parametri_2), "w+")
  f2.write(str(content))
  f2.close()
#Pasi e kem perdor kogja shume
def read_files(parametri):
  f = open(book, "r")
  content = f.read()
  return content
  
  



#Ky funksion perdore pasi e shikojm qe te import nuk e ka ajo permbajtjne publike.
def is_not_Public(parametri_1, parametri_2):
  try:
    a = isFile(parametri_2)
    if isFile[1] == True:
      print("Gabim: Celesi '%s' ekziston paraprakisht." %(parametri_2))
      sys.exit(1)
    else:

      book1 = r"C:\Users\hp\Desktop\%s" %(parametri_1)
      book = "%s" %(book1)

      f = open(book, "r")
      content = f.read()

      aname_ = b[-20:]

      if (aname == "some_private_key.xml"):
        book1_=r"C:\Users\hp\Desktop\arbnorit_mja_kallxu\some_public_key.xml"
        book_ = "%s" %(book1_)

        f2 = open(book, "r")
        content2 = f2.read()

        generate_XML_public("%s.pub.xml" %(parametri_2))
        generate_XML_private("%s.xml" %(parametri_2))

        print("Celesi privat u ruajt ne fajllin 'keys/%s.xml'." %(parametri_2))
        print("Celesi publik u ruajt ne fajllin 'keys/%s.pub.xml'." %(parametri_2))

        f3 = open("%s.pub.xml" %(name), "w+")
        f3.write(str(content2))
        f3.close()

        book2_ = "%s" %(book1)

        f4 = open(book2_, "r")
        content3 = f4.read()

        f5 = open("%s.xml" %(parametri_2), "w+")
        f5.write(str(content3))
        f5.close()

      else:
        print(error)
  except:
    book1 = r"C:\Users\hp\Desktop\%s" %(parametri_1)
    aname2 = b[:-4]
    book = "%s" %(book1)
    bbook = "%s.pub.xml" %(aname2)

    f6 = open(book, "r")
    content4 = f6.read()

    f7 = open(bbook, "r")
    content5 = f7.read()

    generate_XML_public("%s.pub.xml" %(parametri_2))
    generate_XML_private("%s.xml" %(parametri_2))
    print("Celesi privat u ruajt ne fajllin 'keys/%s.xml'." %(parametri_2))
    print("Celesi publik u ruajt ne fajllin 'keys/%s.pub.xml'." %(parametri_2))

    f8 = open("%s.pub.xml" %(parametri_2), "w+")
    f8.write(str(content5))
    f8.close()
    content4
    f9 = open("%s.xml" %(parametri_2), "w+")
    f9.write(str(content4))
    f9.close()
     

#Ky funksion kur e gjun at exception te import kur themi print(error), e error osht e pa deklarume.

#def is_not_Public2(parametri_1, parametri_2):

#Ky eshte nje funksion i cili e gjeneron XML filen e qelesit publik te shfrytezuesit
def generate_XML_public(parametri):
  pb, pr, p, q, n, e, d, dp, dq, iQ = generateKey()
  n_base64 = return_base64(n)
  e_base64 = return_base64(e)

  root=xml.Element("RSAKeyValue")
  type1=xml.SubElement(root,"Modulus")
  type1.text=str(n_base64)
  Amount1=xml.SubElement(root,"Exponent")
  Amount1.text=str(e_base64)
  tree=xml.ElementTree(root)
  with open(parametri,"wb") as files:
      tree.write(files)




#Ky eshte nje funksion i cili e gjeneron XML filen e qelesit privat te shfrytezuesit
def generate_XML_private(parametri):
  pb, pr, p, q, n, e, d, dp, dq, iQ = generateKey()
  p_base64 = return_base64(p)
  q_base64 = return_base64(q)
  n_base64 = return_base64(n)
  e_base64 = return_base64(e)
  d_base64 = return_base64(d)
  dp_base64 = return_base64(dp)
  dq_base64 = return_base64(dq)
  iQ_base64 = return_base64(iQ)
  

  root=xml.Element("RSAKeyValue")
          
  type1=xml.SubElement(root,"Modulus")
  type1.text=str(n_base64)
     
  Amount1=xml.SubElement(root,"Exponent")
  Amount1.text=str(e_base64)
     
  type2=xml.SubElement(root,"P")
  type2.text=str(p_base64)
     
  type3=xml.SubElement(root,"Q")
  type3.text=str(q_base64)
     
  type4=xml.SubElement(root,"DP")
  type4.text=str(dp_base64)
          
  type4=xml.SubElement(root,"DQ")
  type4.text=str(dq_base64)
        
  type4=xml.SubElement(root,"InverseQ")
  type4.text=str(iQ_base64)
       
  type4=xml.SubElement(root,"D")
  type4.text=str(d_base64)
    
  tree=xml.ElementTree(root)
  with open(parametri,"wb") as files:
      tree.write(files)


#Qeky osht nje funksion per mi gjeneru krejt parametrat qe vyn per mi gjeneru qelsat privat edhe publik mirepo edhe qelsat mi gjeneru.
def generateKey():
  keySize=1024
  p = rabinMiller.generateLargePrime(1024) #KETU KEMI GJENERUAR VLEREN E "q"
  
  q = rabinMiller.generateLargePrime(keySize) #KETU KEMI GJENERUAR VLEREN E "q"
 
  n = p * q #KETU KEMI LLOGARITUR VLEREN E "n"

  while True:
   e = random.randrange(2 ** (keySize - 1), 2 ** (1024)) #KETU KEMI GJENERUAR VLEREN E "e" E CILA ESHTE RELATIVELY PRIME TO (p-1)*(q-1).
   if cryptomath.gcd(e, (p - 1) * (q - 1)) == 1:
       break

  d = cryptomath.findModInverse(e, (p - 1) * (q - 1)) #KETU KEMI VLEREN E "d" E CILA ESHTE MOD INVERSE OF "e"

  publicKey = (n, e) #KJO ESHTE VLERA E QELSIT PUBLIK 

  privateKey = (n, d) #KJO ESHTE VLERA E QELSIT PRIVAT

  dp = d % (p-1) #KETU ESHTE VLERA E "dp"
  dq = d % (q-1) #KETU ESHTE VLERA E "dq"
  iQ = (pow(q, -1)) % p #KETU ESHTE VLERA E INVERSE q

  return (publicKey, privateKey, p, q, n, e, d, dp, dq, iQ)


#Ky funksion e merr qelsin publik edhe mesazhin qe dojm me enkriptu, dhe e kthen mesazhin e enkriptuar
def encrypt(e,n,n_text,user):
  e,n = pub_key
  x = []
  m = 0
  for i in n_text:
    if (i.isupper()):
      m = ord(i) - 65
      c = (m**e) % n
      x.append(c)
    elif (i.islower()):
      m = ord(i) - 97
      c = (m**e) % n
      x.append(c)
    elif (i.isspace()):
      spc = 400
      x.append(400)
  return x






def decrypt(d,n,c_text, user):
  d,n = priv_key
  txt = c_text.split(',')
  x = ''
  m = 0
  for i in txt:
    if (i == '400'):
      x += ' '
    else:
      m = (int(i) ** d) % n
      m += 65
      c = chr(m)
      x += c
  return x 


def hash_salt():
  bcrypt.hashpw(parametri_1, bcrypt.gensalt(12))
  return bcrypt.hashpw(parametri_1, bcrypt.gensalt(12))




def get_hashed_password(plain_text_password):
  return bcrypt.hashpw(plain_text_password, bcrypt.gensalt())



#Me ane te keti funksione e kthejm si return vleren e passwordit te siguruar me ane te hash and salt.
def check_password(plain_text_password, hashed_password):
  return bcrypt.checkpw(plain_text_password, hashed_password)



#Me ane te keti funksioni e kthejm vleren nga base 64 ne numer.
def base64_to_num(parametri_1):
  a=parametri_1.encode("utf-8")
  a1=base64.b64decode(a)
  a2=a1.decode("utf-8")
  return a2

#Me ane te keti funksioni e marrum vleren e qelsit publik "e".
def found_e(parametri_1):
  text = read_xml_file(parametri_1)
  m = re.search('<Exponent>(.+?)</Exponent>', text)
  if m:
    found = m.group(1)
  final = base64_to_num(found)
  return int(final)



#Me ane te keti funksioni e marrum vleren e qelsit privat "d". 
def found_d(parametri_1):
  text = read_xml_file(parametri_1)
  m = re.search('<D>(.+?)</D>', text)
  if m:
    found = m.group(1)
  final = base64_to_num(found)
  return int(final)
  




#Me ane te ketij funksioni e marrum vleren e parametrit "n" te qelesit te shfrytezuesit.
def found_n(parametri_1):
  text = read_xml_file(parametri_1)
  m = re.search('<Modulus>(.+?)</Modulus>', text)
  if m:
    found = m.group(1)
  final = base64_to_num(found)
  return int(final)




#Me ane te ketij funksioni e shikojm se a permban numra apo ndonje simbol te veqant fjalekalimi.
def is_fjalekalimi():
  #fjalekalimi = input("Jepni fjalekalimin:")
  fjalekalimi = getpass.getpass(prompt='Jepni fjalekalimin:')
  
  special_chars = string.punctuation


  permban_numer = any(map(str.isdigit, fjalekalimi))

  permban_simbol = list(map(lambda char: char in special_chars, fjalekalimi))
  permban_simbol_len = len(permban_simbol)




  if len(fjalekalimi) < 6:
    print("Gabim: Fjalekalimi duhet te kete gjatesine se paku 6 karaktere.")
    sys.exit()
  else:
    if permban_numer == True or permban_simbol[permban_simbol_len - 1] == True:
      return fjalekalimi
    else:
      print("Gabim: Fjalekalimi duhet te permbaje se paku nje numer ose simbol.")
      sys.exit(1)





#Me ane te ketij funksioni lexojm nga permbajtja e xml filev.
def read_xml_file(parametri_1):
  f = open("%s.xml" %(parametri_1), "r")
  content = f.read()
  f.close()
  return content




#Me ane te ketij funksioni i fshijm shfrytezuesit.
def delete_users(parametri_1):
  p = parametri_1
  b = r"C:\Users\hp\Desktop\Users\%s" %(parametri_1)
  f = open("%s.xml" %(parametri_1), "r")
  content = f.read()
  f.close()
  os.remove("%s.txt" %(b))
  os.remove("%s.xml" %(parametri_1))
  if (content.find('P') == -1):


    print("Jane fshier te gjitha te dhenat e shfrytezuesit nga baza e shenimeve!.")
       
    print("Eshte larguar celesi publik 'keys/%s.xml'" %(parametri_1))

  else:

    print("Jane fshier te gjitha te dhenat e shfrytezuesit nga baza e shenimeve!.")                                 
    print("Eshte larguar celesi privat 'keys/%s.xml'" %(parametri_1))





#Edhe me ane te ketij funksioni fshijm shfrytezuesit.
def delete_user2(parametri_1):
  b = r"C:\Users\hp\Desktop\Users\%s" %(parametri_1)
  os.remove("%s.txt" %(b))
  os.remove("%s.pub.xml" %(parametri_1))




  #Edhe me ane te ketij funksioni fshijm shfrytezuesit.
def delete_user3(parametri_1):
  b = r"C:\Users\hp\Desktop\Users\%s" %(parametri_1)
  os.remove("%s.txt" %(b))
  os.remove("%s.xml" %(parametri_1))
  os.remove("%s.pub.xml" %(parametri_1))
  print("Jane fshier te gjitha te dhenat e shfrytezuesit nga baza e shenimeve!.")
  print("Eshte larguar celesi privat 'keys/%s.xml'" %(parametri_1))
  print("Eshte larguar celesi publik 'keys/%s.pub.xml'" %(parametri_1))





#Me ane te ketij funksioni krijojm nje text file ne te cilen e ruajm fjalekalimin i cili eshte i siguruar me ane te hash and salt.
def create_user_textfile(name, parametri_2):
  b = r"C:\Users\hp\Desktop\Users\%s" %(name)
  f= open("%s.txt" %(b),"w+")
  
  
  content1 = str(parametri_2)
  content = get_hashed_password(content1)

  f.write(content)
  f.close()



#Me ane te ketij funksioni marrim permbajtjen e fajleve te cilat i cekim.
def read_file(parametri_1):
  b = r"C:\Users\hp\Desktop\Users\%s" %(parametri_1)
  f= open("%s.txt" %(b),"r")
  content = f.read()
  return content



#Me ane te ketij funksioni shikojme se fjalekalimi te cilin e shenojme a i takon vertet shfrytezuesit.
def is_password(parametri_1,parametri_2):
  password = parametri_1
  return check_password(password, parametri_2)



#Me ane te ketij funksioni e gjenerojm tokenin.
def token(parametri_1):
  msg = "A_secret_Key"
  hash_v,sig_nature = signature(msg,parametri_1)
  
  x = datetime.now() + timedelta(seconds=1200)
  token = tokenlib.make_token({"username": "%s" %(parametri_1),"signature": sig_nature, "verify": "%s" %(msg),"t": "%s" %(x), "hashv": hash_v},timeout=1200, secret="Secret_Key")
  print(token)


#Me ane te ketij funksioni e bejme nenshkrimin e tokenit me ane te qelsit privat te shfrytezuesit.
def signature(parametri_1,parametri_2):
  msg = b'str(parametri_1)'
  n = found_n(parametri_2)
  d = found_d(parametri_2)
  hash = int.from_bytes(sha512(msg).digest(), byteorder='big')
  #print("qe 1")
  signature = pow(hash, d, n)
  #print(signature)
  return (hash, signature)

#Me ane te ketij funksioni varesisht tokenit na shfaqen te dhenat ne lidhje me shfrytezuesin, se a eshte valid apo jo, deri kur eshte valid.
def status(parametri_1):
        #token=str(s_argv_2)
        token=str(parametri_1)
        try:
         data = tokenlib.parse_token(token, secret="Secret_Key")
         a = data['username']
         b = data['signature']
         time = data['t']
         #print("qe 2")
         #print(b)
         c = data['verify']
         u = data['hashv']
         #print(a)
         e = found_e(str(a))
         n = found_n(str(a))

        

         msg = b'str(c)'
        #hash = int.from_bytes(sha512(msg).digest(), byteorder='big')
         hashFromSignature = pow(int(b), e, n)
         #print(e)
         #print(hash)
         #print("qe tash")
         #print(hashFromSignature)
         #print("genti")
         if ((u == hashFromSignature) == True):
           print("User: %s" %a)
           print("Valid: po")
           print("Skadimi: %s" %time)

         else:
           print("User: %s" %a)
           print("Valid: jo")
           print("Skadimi: %s" %time)
        except:
           #print("User: %s" %a)
           print("Valid: jo")


