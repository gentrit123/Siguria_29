import random, sys, os,Generate, cmath
import xml.etree.ElementTree as xml
import base64
from Crypto.Cipher import DES
from Crypto import Random
from os import sys
import binascii

from Crypto.PublicKey import RSA

from Crypto.Cipher import PKCS1_OAEP


m=sys.argv[1]
def func():
   #Dekriptimi me caesar crypt ne gjuhen programuese python
 def dekriptimi(teksti,qelesi):
   rezultati = ""
   
   #kalimi neper secilin karakter
   for i in range(len(teksti)):
      char = teksti[i]
      ####1
      
      #Enkriptimi i shkronjave te medha
      if(char.isupper()):
         rezultati += chr((ord(char) - int(qelesi) - 65) % 26 + 65)
         
      #Enkriptimi i shkronjave te vogla
      elif(char.islower()):
         rezultati += chr((ord(char) - int(qelesi) - 97) % 26 + 97)
         
      elif(char<chr(65)):
         rezultati += char
         
         
      else:
         rezultati += " "
      
   return rezultati
   
 #E japim tekstin dhe qelesin per 

 teksti = input("Jepni tekstin : ")
 qelesi=input("Jepni qelesin:")
 print("Teksti qe do dekriptohet : " + teksti)
 print("Qelesi : " + str(qelesi))
 print ("Teksti i dekriptuar : " + dekriptimi(teksti,qelesi))
 def func0():
    #enkriptimi me caesar crypt ne gjuhen programuese python
 def enkriptimi(teksti,qelesi):
  rezultati = ""
  #kalimi neper secilin karakter te tekstit
  for i in range(len(teksti)):
     char = teksti[i]
     
     #Enkriptimi i shkronjjave te medha , ne ASCII code nga 65
     if(char.isupper()):
        rezultati += chr((ord(char) + int(qelesi)-65) % 26 + 65)
     
     #Enkriptimi i shkronjave te vogla , ne ASCII code nga 97
     elif(char.islower()):
        rezultati += chr((ord(char) + int(qelesi) - 97) % 26 + 97)
     
     #Enkriptimi i simboleve dhe nurave qe mbesin te njejte , ASCII 1-64
     elif(char<chr(65)):
        rezultati+=char
        
     #Ne rast se kemi hapsira ato perfillen
     else:
        rezultati+=" "
     
  return rezultati

 #E japin tekstin dhe qelesi dhe e testojme funksionin
 teksti = input("Jepni tekstin:")
 qelesi = input("Jepni qelesin:")
 print("Teksti qe do enkriptohet : " + teksti)

 print ("Teksti i enkriptuar: " + enkriptimi(teksti,qelesi))

def func1():
 class BealsCipher:
    def __init__(self):
        choose_function = input("Enter e to encode or d to decode:")
        if(choose_function.lower() == 'e'):
            self.encoder()
        elif(choose_function.lower() == 'd'):
            self.decoder()
        else:
            print("Please try again!")
    def encoder(self):
        book = input("Enter text file to use as key:")
        word = input("Enter word to encode:")
        outArray = []
        f = open(book, "r")
        book_characters = list(f.read())
        word_characters = list(word)

        output_array = []
        lastIdx = 0
        for char in word_characters:
            try:
                charidx = book_characters.index(char,lastIdx,len(book_characters) -1)
                lastIdx = charidx
                output_array.append(charidx + 1)
            except ValueError as e:
                charidx = book_characters.index(char,0,lastIdx)
                lastIdx = charidx
                output_array.append(charidx + 1)
        result = ""
        for x in output_array: 
            result += str(x) + " "
        print("Encoded word: " + result)
                
    def decoder(self):
        book = input("Enter text file to use as key:")
        word = input("Enter word to decode:")
        outArray = []
        f = open(book, "r")
        book_characters = list(f.read())
        output_array = []
        word_encoded = word.strip().split(" ")
        for char in word_encoded:
            output_array.append(book_characters[int(char)-1])
        result = ""
        for x in output_array: 
            result += x
        print("Decoded word: " + result)
 
 BealsCipher()
def func2():
 class PermutationCipher:
    def __init__(self):
        choose_function = input("Enter e to encode or d to decode:")
        cipher_input = input("Enter permutation to use as key:")
        ciphertext = input("Enter word to encode/decode:")
        cipher = list(str(cipher_input).strip())
        cipher = [int(item) for item in cipher]
        ciphertext = ciphertext.strip()
        if(choose_function.lower() == 'e'):
            print(self.encrypt(cipher,ciphertext))
        elif(choose_function.lower() == 'd'):
            print(self.decrypt(cipher,ciphertext))
        else:
            print("Please try again!")


    def decrypt(self,cipher, ciphertext):
        ciphertext  = self.encrypt(self.inverse_key(cipher), ciphertext)
        return ciphertext[:-1]

    def encrypt(self,cipher, plaintext):
        
        plaintext = "".join(plaintext.split(" ")).lower()
        ciphertext = ""
        for pad in range(0, len(plaintext)%len(cipher)*-1%len(cipher)):
            plaintext += "x"
        for offset in range(0, len(plaintext), len(cipher)):
            for element in [a-1 for a in cipher]:
                ciphertext += plaintext[offset+element]
            ciphertext += " "
        return ciphertext[:-1]

    def inverse_key(self,cipher):
        inverse = []
        for position in range(min(cipher),max(cipher)+1,1):
            inverse.append(cipher.index(position)+1)
        return inverse
 
 PermutationCipher()
def func3():
   #caesar brute-force me te cilen provohen te gjithe qelesat e mundeshem
 #Mesazhi i enkriptuar
 mesazhi = 'PERSHENDETJE NGA FIEK!'
 shkronjat = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'

 print("caesar brute-force")

 for qelesi in range(len(shkronjat)):
   dekriptimi = ''
   
   for simboli in mesazhi:
   
      if simboli in shkronjat:
         num = shkronjat.find(simboli)
         num = num - qelesi
         
         if num < 0:
            num = num + len(shkronjat)
         dekriptimi += shkronjat[num]
         
      else:
         dekriptimi += simboli
   print('Qelesi #%s: %s' % (qelesi,dekriptimi))


def main():
        def ari():
            print("Gent baba")
        name=sys.argv[2]
        name2=sys.argv[1]
        
        
   
        makeKeyFiles(name,1024,name2,name5,name6)
def generateKey(keySize,name,name2,name5,name6):
    name2=sys.argv[1]
    if name2=="create-user":
     
   
        
        print('Generating p prime...')
        p = rabinMiller.generateLargePrime(keySize)
        print('Generating q prime...')
        q = rabinMiller.generateLargePrime(keySize)
        n = p * q
	
       
        print('Generating e that is relatively prime to (p-1)*(q-1)...')
        while True:
           e = random.randrange(2 ** (keySize - 1), 2 ** (keySize))
           if cryptomath.gcd(e, (p - 1) * (q - 1)) == 1:
              break
   
       
        print('Calculating d that is mod inverse of e...')
        d = cryptomath.findModInverse(e, (p - 1) * (q - 1))
        publicKey = (n, e)
        privateKey = (n, d)
        dq=d % (q-1)
        dp=d % (p-1)
        
        iQ=(pow(q,-1))%p
        
        
        num1=str(p).encode("utf-8")
        num1_=base64.b64encode(num1)
        num11=num1_.decode("utf-8")
        num2=str(q).encode("utf-8")
        num2_=base64.b64encode(num2)
        num22=num2_.decode("utf-8")
        num3=str(n).encode("utf-8")
        num3_=base64.b64encode(num3)
        num33=num3_.decode("utf-8")

        num4=str(e).encode("utf-8")
        num4_=base64.b64encode(num4)
        num44=num4_.decode("utf-8")

        num5=str(d).encode("utf-8")
        num5_=base64.b64encode(num5)
        num55=num5_.decode("utf-8")
        num6=str(dp).encode("utf-8")
        num6_=base64.b64encode(num6)
        num66=num6_.decode("utf-8")

        num7=str(dq).encode("utf-8")
        num7_=base64.b64encode(num7)
        num77=num7_.decode("utf-8")
       
        num8=str(iQ).encode("utf-8")
        num8_=base64.b64encode(num8)
        num88=num8_.decode("utf-8")

        def GenerateXMLpublic(name):
          a=5
          root=xml.Element("RSAKeyValue")
          
          type1=xml.SubElement(root,"Modulus")
          type1.text=str(num33)
     
          Amount1=xml.SubElement(root,"Exponent")
          Amount1.text=str(num44)
     
          tree=xml.ElementTree(root)
          with open(name,"wb") as files:
                  tree.write(files)
          
        def GenerateXMLprivate(name):
          a=5
          root=xml.Element("RSAKeyValue")
          
          type1=xml.SubElement(root,"Modulus")
          type1.text=str(num33)
     
          Amount1=xml.SubElement(root,"Exponent")
          Amount1.text=str(num44)
     
          type2=xml.SubElement(root,"P")
          type2.text=str(num11)
     
          type3=xml.SubElement(root,"Q")
          type3.text=str(num22)
     
          type4=xml.SubElement(root,"DP")
          type4.text=str(num66)
          
          type4=xml.SubElement(root,"DQ")
          type4.text=str(num77)
        
          type4=xml.SubElement(root,"InverseQ")
          type4.text=str(num88)
       
          type4=xml.SubElement(root,"D")
          type4.text=str(num55)
    
          tree=xml.ElementTree(root)
          with open(name,"wb") as files:
                  tree.write(files)
        
        if name=="some_public_key":
          GenerateXMLpublic('%s.xml' %(name))
          print('Public key:', publicKey)
          ###
          ae=name
          print('Private key:', privateKey)
          return (publicKey, privateKey)
        
        elif name=="some_private_key":
       
          GenerateXMLprivate('%s.xml' %(name))
          print('Public key:', publicKey)
          ###
          ae=name
          print('Private key:', privateKey)
          return (publicKey, privateKey)
        else:
           GenerateXMLpublic('%s.pub.xml' %(name))
           GenerateXMLprivate('%s.xml' %(name))
           print('Eshte krijuar celesi privat "keys/%s.xml"' %(name))
           ###
           ae=name
           print('Eshte krijuar celesi public "keys/%s.pub.xml"' %(name))
           return (publicKey, privateKey)
         elif name2=="delete-user":
     
      try:
        isFile = os.path.isfile("%s.xml" %(name))  
        isFile1=os.path.isfile("%s.pub.xml" %(name))
        if isFile==True and isFile1==True:

           
        
        
          ae=name
      
          os.remove("%s.xml" %(ae))
          os.remove("%s.pub.xml" %(ae))
          print("Eshte larguar celesi privat 'keys/%s.xml'" %(name))
          print("Eshte larguar celesi publik 'keys/%s.pub.xml'" %(name))
        elif isFile==True:
          ae=name
          os.remove("%s.xml" %(ae))
          print("Eshte larguar celesi privat 'keys/%s.xml'" %(name))
        elif isFile1==True:
          ae=name
          os.remove("%s.pub.xml" %(ae))
          print("Eshte larguar celesi publik 'keys/%s.pub.xml'" %(name))



      except:
        print("Gabim: Celesi '%s' nuk ekziston." %(name))
    elif name2=="export-key":

     
      if name == "public":
       try:
        
        print("boni:")
        print(name6)
        
        with open("%s.pub.xml" %(name5), "r") as reader:
           
               ff=(reader.read())
        book1="%s.pub.xml" %(name5)
        o=open(book1,"r")
        s=o.read()
        if name6=="":
           print(s)
        GenerateXML("%s.xml" %(name6))
        n=open("%s.txt" %(name6),"w+")
        n.write(str(s))
        n.close()
        if name6 !="":

           print("Celesi publik u ruajt ne fajllin '%s.xml'" %(name6))
       except:
         if name6=="":
            print(s)
         else:
             print("Gabim: Celesi public % nuk ekziston." %(name5))
     
      elif name == "private":
        try:
            with open("%s.xml" %(name5), "r") as reader:
                ff=(reader.read())
               
            
            book="%s.xml" %(name5)
            o=open(book,"r")
            s=o.read()
            GenerateXML1("%s.xml" %(name6))
            n=open("%s.txt" %(name6),"w+")
            n.write(str(s))
            n.close()
            if name6 != "":
 
               print("Celesi privat u ruajt ne fajllin '%s.xml'" %(name6))
        except:
          if name6 =="":
           print(s"
          else:
            print("Gabim: Celesi privat %s nuk ekziston." %(name5))
    elif name2=="import-key":
      print("Gent babaaaa")
      a=name5
      b=len(a)
      c=a[-10:]
      d=a[-10:]
      z=a[-3:]
     
      try:
        if z=="jpg":
          print("Gabim: Fajlli i dhene nuk eshte celes valid.")
        elif z=="png":
          print("Gabim: Fajlli i dhene nuk eshte celes valid.")
           
        elif c=="ic_key.xml":
          
          if len(y)==4:
           d=sys.argv[3]
    
           b=r"C:\Users\hp\Desktop\%s" %(d)
           with open("%s" %(b), "r") as reader:
                print(reader.read())
           a=input("Kqyrni a u kriju file xml i zbrazet!")
           book="%s" %(b)
           o=open(book,"r")
           s=o.read()
           GenerateXML("%s.pub.xml" %(name))
           n=open("%s.pub.xml" %(name),"w+")
           n.write(str(s))
           n.close()
        elif c=="te_key.xml":
           
          if len(y)==4:
           d=sys.argv[3]
    
           b=r"C:\Users\hp\Desktop\%s" %(d)
           with open("%s" %(b), "r") as reader:
                print(reader.read())
           a=input("Kqyrni a u kriju file xml i zbrazet!")
           book="%s" %(b)
           o=open(book,"r")
           s=o.read()
           GenerateXML("%s.pub.xml" %(name))
           GenerateXML1("%s.xml" %(name))
           n=open("%s.pub.xml" %(name),"w+")
           n.write(str(s))
           n.close()
           with open("%s" %(b), "r") as reader:
                print(reader.read())
           a1=input("Kqyrni a u kriju file xml i zbrazet!")
           book1="%s" %(b)
           o1=open(book1,"r")
           s1=o1.read()
           
           GenerateXML1("%s.xml" %(name))
           n1=open("%s.xml" %(name),"w+")
           n1.write(str(s1))
           n1.close()
      except:
          print("nuk e di")
    elif name2=="write-message":
      try:
         print("baba")
         from Crypto.PublicKey import RSA
         from Crypto.Cipher import PKCS1_OAEP

         import binascii


         keyPair = RSA.generate(3072)


         pubKey = keyPair.publickey()

         pubKeyPEM = pubKey.exportKey()

         


         privKeyPEM = keyPair.exportKey()

         
         msg = b'A message for encryption'

         encryptor = PKCS1_OAEP.new(pubKey)

         encrypted = encryptor.encrypt(msg)

         
         key=b'ismykeyb'
         iv=os.urandom(8)
         bi=iv
         cipher=DES.new(key, DES.MODE_OFB, iv)
         ##enkriptimi me des i mesazhit
         plaintext=name5
         plaintext1=plaintext.encode("utf-8")
         ##qeky o msg i enkriptum
         msg=iv+ cipher.encrypt(plaintext1)
         encryptor = PKCS1_OAEP.new(pubKey)

         encrypted = encryptor.encrypt(key)


         print("QE:")
         
         print("Qelesi i enkriptum me rsa:")
        
         naa=base64.b64encode(msg)
         n4=naa.decode("utf-8")
         
         nee=base64.b64encode(encrypted)
         n3=nee.decode("utf-8")
         a=name
         nu=a.encode("utf-8")
         nuu=base64.b64encode(nu)
         n1=nuu.decode("utf-8")
         no=base64.b64encode(bi)
         n2=no.decode("utf-8")
         print(n1)
         print(n4)
         print(n3)
         print(n2) 
         ciphertext=n1+" . "+n2+" . "+n3+" . "+n4
         print("ciphertext=", ciphertext)
      except:
          print("Kqyrni ma mire se keq e keni")
    elif name2=="read-message":
     try:
        a=input("Jepni mesazhin e enkriptuar:")
        decryptor = PKCS1_OAEP.new(keyPair)
        decrypted = decryptor.decrypt(a)
        print("Decrypted:", decrypted)
     except:
        print("Sboni")
         
        
def makeKeyFiles(name, keySize,name2,name5,name6):
  if name2=="create-user":   
    isFile = os.path.isfile("%s.xml" %(name))  
    if isFile==True:
          print("Gabim: Celesi %s ekziston paraprakisht" %(name))
          sys.exit(1)


    else:

           generateKey(keySize,name,name2,name5,name6)
           print("open boni")     
   
     
  elif name2 == "delete-user":
    
    try:
        generateKey(keySize,name,name2,name5,name6)
        ae=name
        
    except:
        print("Gabim: files '%s' nuk ekziston." %(name))
  elif name2== "export-key":
       generateKey(keySize,name,name2,name5,name6)
       
  elif name2=="import-key":
       generateKey(keySize,name,name2,name5,name6)
       
  elif name2=="write-message":
        generateKey(keySize,name,name2,name5,name6)
        
  elif name2=="read-message":
         generateKey(keySize,name,name2,name5,name6)
         
        
        
        
if __name__ == '__main__':
   name2=sys.argv[1]
  
   def GenerateXML(fileName):
          a=5
          root=xml.Element("RSAKeyValue")
          
          type1=xml.SubElement(root,"Modulus")
          type1.text=""
     
          Amount1=xml.SubElement(root,"Exponent")
          Amount1.text=""
     
          tree=xml.ElementTree(root)
          with open(name,"wb") as files:
                  tree.write(files)
 
       
        
 
 
 
 
 
 
 
            
            
          
            
            
    
      




