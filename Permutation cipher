import sys
import os

class PermutationCipher:
    def __init__(self):
        choose_function = input("Enter e to encode or d to decode:")
        cipher_input = input("Enter permutation to use as key:")
        ciphertext = input("Enter word to encode/decode:")
        cipher = list(str(cipher_input).strip())
        cipher = [int(item) for item in cipher]
        ciphertext = ciphertext.strip()
        if(choose_function.lower() == 'e'):
            print(self.encrypt(cipher,ciphertext))
        elif(choose_function.lower() == 'd'):
            print(self.decrypt(cipher,ciphertext))
        else:
            print("Please try again!")
            
            
    def decrypt(self,cipher, ciphertext):
        ciphertext  = self.encrypt(self.inverse_key(cipher), ciphertext)
        return ciphertext[:-1]
        
    def encrypt(self,cipher, plaintext):
    
        plaintext="".join(plaintext.split(" ")).lower()
        ciphertext = ""
        for pad in range(0,len(plaintext)%len(cipher)*-1%len(cipher)):
            plaintext += "x"
        for offset in range(0, len(plaintext), len(cipher)):
            for element in [a-1 for a in cipher]:
                ciphertext += plaintext[offset+element]
            ciphertext += " "
        return ciphertext[:-1]
        
    def inverse_key(self,cipher):
        inverse = []
        for position in range(min(cipher),max(cipher)+1,1):
            inverse.append(cipher.index(position)+1)
        return inverse
        
PermutationCipher()
        
        
        
    
       
        
        
            
          
            
            
            
            
            
        
        

